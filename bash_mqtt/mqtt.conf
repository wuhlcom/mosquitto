#!/bin/bash
#auth:wuhongliang
#auth:2016-11-15
#mqtt client config file
#mosquitto client params
####################client pcs#####################
ipPre="192.168.10."
#client pc ip address array
#ip_array=("${ipPre}20" "${ipPre}164")
ip_array=("${ipPre}164")
#ip_array=("")
#client pc root account
rootusr="root"
######################mqtt server#################
srv_ip=192.168.10.8
#redisSrvIP=192.168.10.99
redisSrvIP=192.168.10.99
#mqtt server port
caPort=8883
srv_port=1883
redisPort=6379
########mqtt client keepLive time#############
keepLive=60
##########mqtt client redis "usr" "pw" "index"#################
#是否创建用户名和密码
mqttAuth=true
#设置认证类型,密码认证“pw”，密码+单向证书“siCa”,密码+双向证书“biCa”
auType=biCa
defaultUsr=mqttclient
defaultPasswd=mqttclient
caPath=/home/zhilu/mosquitto/bash_mqtt/cafile/ca.crt
keyPath=/home/zhilu/mosquitto/bash_mqtt/cafile/client.key
crtPath=/home/zhilu/mosquitto/bash_mqtt/cafile/client.crt
defaultIndex=1
localTcDir="/home/zhilu/mosquitto/bash_mqtt"
remote_dir="/home/zhilu/mosquitto/bash_mqtt"
remoteReportsDir="/home/zhilu/mosquitto/bash_mqtt/reports"
remoteRecordsDir="/home/zhilu/mosquitto/bash_mqtt/records"
tcGap=10
##########################################pc interface name
intf=eth0
#cIP=`ip a|grep "inet\s*192.168.10.*$intf"|awk -F " " '{print $2}'|sed 's/\/24//g'`
cIP=`ifconfig $intf|grep "inet\s*addr:\s*192\.168\.10\.*"|awk -F " " '{print $2}'|sed 's/addr://g'`
localPcFlag=true
localIntf=eth0
#localPcIP=`ip a|grep "inet\s*192.168.10.*$localIntf"|awk -F " " '{print $2}'|sed 's/\/24//g'`
localPcIP=`ifconfig $intf|grep "inet\s*addr:\s*192.168.10.*"|awk -F " " '{print $2}'|sed 's/addr://g'`

#统一同一脚本的日志时间，这样就不会因为时间问题导致同一日志写入到了不同文件
currentTime=`date "+%Y%m%d%H%M%S"`
########################logs########################
#file size
#监控日志的文件最大值
fileSize=81920
#log file name,must be ""
logFileName=""
#################################how long to record the logs
#监控日志记录间隔
logGap=300
################mosquitto client ips,empty,log all clients 
#clientIP="192.168.10.76\|192.168.10.81"
#用于服务器生成日志时过滤
clientIP=""
######################capture##############################
#是否抓包
capFlag=false
#tcp port filter
filterPort=1883
#cap save Path
capPath="caps/"
#cap save file name
capFile="cap_${intf}_${cIP}.pcapng"
#cap file size MB
capFileSize=500
#cap file account
capFileNum=50
subCcount=1
#############testcase 1 subAll###########################################
#############服务器最大容量测试多台机器每台建立约2.5W会话直到达到最大规格####
#############centerControl.sh subAll######################
#############mqttClient.sh subLoop########################
#订阅者id前缀
subIDPre="mqttSubId"
#订阅主题前缀
subTopicPre="mqttTopic"
#单台PC订阅数量,20000左右
subNum=20000
#订阅起始ID序号
sSubNum=1
#订阅结束ID序号
eSubNum=`expr $subNum + $sSubNum - 1`
#订阅过程计数
#mqttClient.sh subLoopNoAcc
subFName="SubNum"
#查询订阅结果间隔:s
querySubGap=5
#查询订阅结果,如果查询结果不能达到预期目标就会进行多次查询的次数
querySubCount=5
subWait=420
#------debug--------
#subWait=5
#############testcase 2 subAllcontinue####################################
############连接性能测试
############达到最大连接数后，保持5分钟观察会话状态####
##################centerControl.sh  subAllContinue#########
#订阅后,总等待时间
queryTime=300
#订阅后每隔多久观察一次订阅结果
queryGap=60
#-----debug--------------
#queryTime=10
#queryGap=5
#############testcase 3 subCContinue###########################################
#########客户端连接/断开性能测试
#########达到最大连接后反复进行连接断开操作，每一次操作连接，断开数要正常
#############单次订阅#############################################
#############centerControl.sh subCcontinue()######################
#############mqttClient.sh subCLoop###############################
#单次订阅ID前缀
subCIDPre="subCID"
#单次订阅固定主题
subCTopic="subCTopic"
#单次PUB固定消息内容
pubCMsg="finishSubCs"
#PUB固定ID
pubCID="pubCID"
#单台PC单次订阅数量,当订阅数量越多subCWait的值必须越大
#订阅数量为20000时 subCWait值为300s左右
subCNum=20000
#订阅起始ID序号
subCsNum=1
#订阅结束ID序号
subCeNum=`expr $subCNum + $subCsNum - 1`
#订阅过程计数
#mqttClient.sh subCLoopNoAcc
subCFName="SubCNum"
#保存订阅后收到的消息
#mqttClient.sh subCLoopNoAcc
subCRecieved="SubCRecieved"
#反复订阅/断开操作总的次数，这里用次数来代替要观察的时长
subCTimes=5
#发布消息后等待消息发布完成的间隔
subCGap=30
#等待订阅成功的间隔
subCWait=300
#---debug------
#subCTimes=2
#subCWait=10
#subCGap=5
######################testcase 4 subFixAll#####################################
######客户端百万次订阅/发布性能测试
######进行大量发布订阅/发布测试,如百万级
######这里大量用户订阅相同主题后，再针对这个主题不停的发布消息#####
######以提高单台PC的利用率
######################mqtt sub fix topic test then pub
######n台PC上m个不同会话订阅同一主题
########这样只发布1次，1台机器就完成m次， n台PC--n x m次消息订阅
########n台PC各发布1次，1台机器n x m, n台pc-- n x n x m次消息订阅
########n台PC各发布k次，1台机器n x m x k,n台pc--n x n x k x m次消息订阅
#"订阅-发布"总次数限制
subFixCount=1000000
#限定查询次数,暂时取消
#subFixQueryMax=100
#单台PC单次订阅数量
subFixNum=20000
#订阅起始ID序号
subFixSNum=1
#订阅结束ID序号
subFixENum=`expr $subFixSNum + $subFixNum - 1`
#发布消息条数
pubFixNum=100
#发布消息起始ID序号
pubFixSNum=1
#发布消息结束ID序号
pubFixENum=`expr $pubFixSNum + $pubFixNum - 1`
#订阅ID前缀
subFixIDPre="subFixID"
#订阅固定主题
subFixTopic="testSubFixTopic"
#订阅计数
subFixFName="SubFixNum"
#订阅消息统计
subFixRecieved="SubFixRecieved"
#------------------------------
#两种限时操作只能选一个
#限定操作超时时间，小时为单位
# subFixHours=30
# subFixQueryTime=`expr $subFixHours \* 60 \* 60`
#限定操作超时时间，分钟为单位
subFixMinutes=120
subFixQueryTime=`expr $subFixMinutes \* 60`
#等待订阅完成间隔
subFixWait=150
#"订阅-发布"间隔这个值要远小于subFixQueryTime
subFixGap=5
##-------------debug-----------
#subFixMinutes=1
#subFixQueryTime=`expr $subFixMinutes \* 60`
#subFixWait=30
#############testcase 5 subCPubR##############################################
############保留消息性能测试
###########发布大量保留消息再去订阅，如百万条保留消息
#############pub retain##############################################
#订阅保留消息ID前缀
subRIDPre="subMsgRetainId"
#发布保留消息ID前缀
pubRIDPre="pubIDRetain"
#保留消息主题前缀
pubRTopicPre="pubTopicRetain"
#保留消息内容前缀
pubRMsgPre="pubMsgRetain"
#单台发布保留消息数量
pubRNum=50000
#保留消息初始序列
pubRsNum=1
#保留消息结束序列
pubReNum=`expr $pubRNum + $pubRsNum - 1`
#保留消息发布计数
pubRFName="PubRNum"
#保留消息订阅计数
subRFName="SubCRNum"
#保存收到保留消息
subCPubRRecieved="SubCPubRRecieved"
#发布保留消息后再订阅的间隔时长
#mqttClient.sh subPubRNoAcc
retainGap=5
pubRWait=500
##--------debug-----------------
#pubRWait=10
###############testcase 6 subCReContinue########################################
#############长时间稳定性测试
#############订阅，发布，断开反复长期测试，
#############每循环测试一次观察订阅，发布，断开操作是否正常
###############centerControl.sh subCRecontinue###################
###############mqttClient.sh subCReLoop##########################
###############长期订阅取消订阅,反复操作#########################
#订阅ID前缀
subCReIDPre="subCReID"
#发布固定消息
pubCReMsg="finishSubCRes"
#发布ID前缀
pubCReID="pubCReID"
#订阅固定主题
subCReTopic="subCReTopic"
#单台机器订阅数量
subCReNum=20000
subCReNum=10
#订阅起始ID序号
subCResNum=1
#订阅结束ID序号
subCReeNum=`expr $subCReNum + $subCResNum - 1`
#订阅计数
subCReFName="SubCReNum"
#保存订阅到的消息
subCReRecieved="SubCReRecieved"
#发布消息后等待发布完成的间隔
subCReGap=60
#订阅消息后等待订阅成功的间隔
subCReWait=60
#限定反复操作的总次数
subCReTimes=10

##-------------------停用--------
#反复"订阅-发布-断开"多久,以小时为单位
#subCHours=3
#subCReTime=`expr $subCHours \* 60 \* 60`
#反复"订阅-发布-断开"多久,以分钟为单位
#subCMinutes=30
#subCReTime=`expr $subCMinutes \* 60`
##-------------------停用--------

##--------------debug---------------------
#subCReGap=10
#subCReWait=10
#subCReTimes=2
##################testcase 7 subCa####################################
##################使用证书认证方式认证，服务器最大订阅数量测试
#主题前缀
subCaTopicPre="subCaTopic"
#ID前缀
subCaIDPre="subCaID"
subCaRecieved="SubCaRecieved"
subCaFName="SubCaNum"
#订阅数量
subCaNum=20000
subCaSNum=1
subCaENum=`expr $subCaSNum + $subCaNum - 1`
#订阅等待
subCaWait=150
#设置订阅后查询总时长,minutes
subCaQuery=30
#将查询总时长转换成以秒为单位 
subCaQueryTime=`expr $subCaQuery \* 60`
#设置查询间隔,单位为分钟
subCaGap=5
#将查询间隔转换成以秒为单位 
subCaGapTime=`expr $subCaGap \* 60`
#---------------debug----------------------
#subCaWait=10
#subCaQueryTime=20
#subCaGapTime=10
##################testcase 8 subPubCaMu####################################
###########订阅多个主题，每个主题下1000个客户端
#订阅主题前缀
subCaMuTopicPre=subCaMuTopicPre
#订阅ID前缀
subCaMuCIDPre=subcaMuCidPre
#保存收到消息
subCaMuRecieved="SubCaMuRecieved"
#保存订阅数
subCaMuFName="SubCaMuNum"
#发布消息数量
pubCaMuFName="PubCaMuNum"
#发布消息Id
pubCaMuIDPre=pubcaMuIDPre
#发布消息前缀
pubCaMuMsgPre=pubCaMuMsgPre
#优先级
subCaMuQos=0
pubCaMuQos=0
#订阅后的等待
subCaMuWait=120
#发布后的等待
pubCaMuWait=120
#一个主题多少个客户端订阅
subCaMuCNum=1000
#查询次数
subPubCaMuTimes=5
#一台PC订阅主题的数量,最大数量在20左右
subCaMuTopicNum=20
subCaMuTopicSNum=1
subCaMuTopicENum=`expr $subCaMuTopicSNum + $subCaMuTopicNum - 1`
#-------------------debug-------------------
#subCaMuWait=10
#pubCaMuWait=10
###############testcase 9 subPubCCa#############################################
#############订阅-发布-断开，反复进行
#############长时间执行
#保存收到消息
subCCaRecieved="SubCCaRecieved"
#计数订阅的客户数
subCCaFName="SubCCaNum"
#计数发布的消息数
pubCCaFName="PubCCaNum"
#订阅的主题前缀
subCCaTopicPre="subCCaTopicPre"
#订阅客户端ID前缀
subCCaIDPre="subCCaIDPre"
#订阅的优先级
subCCaQos=0
#发布的优先级
pubCCaQos=0
subCCaWait=120
pubCCaWait=120
#发布消息的间隔
pubCCaGap=0.3
#操作循环次数
subPubCCaTimes=5
#发布消息ID前缀
pubCCaIDPre="pubCCaIDPre"
#发布消息内容前缀
pubCCaMsgPre="pubCCaMsgPre"
#订阅消息数
subCCaNum=20000
subCCaSNum=1
subCCaENum=`expr $subCCaSNum + $subCCaNum - 1`
#--------------deubg------------------
#subCCaWait=10
#pubCCaWait=10
###############testcase 10 subPubCaCon##########################################
##########大量客户端订阅不同的主题,并针对所有主题循环发布5次消息
#保存收到消息
subCaConRecieved="SubCaConRecieved"
#计数订阅的客户数
subCaConFName="SubCaConNum"
#计数发布的消息数
pubCaConFName="PubCaConNum"
#订阅的主题前缀
subCaConTopicPre="subCaConTopicPre"
#订阅客户端ID前缀
subCaConIDPre="subCaConIDPre"
#订阅的优先级
subCaConQos=0
#发布的优先级
pubCaConQos=0
subCaConWait=120
pubCaConWait=120
#发布消息的间隔
pubCaConGap=0.3
#操作循环次数
subPubCaConTimes=5
#发布消息ID前缀
pubCaConIDPre="pubCaConIDPre"
#发布消息内容前缀
pubCaConMsgPre="pubCaConMsgPre"
#订阅数量
subCaConNum=20000
subCaConSNum=1
subCaConENum=`expr $subCaConSNum + $subCaConNum - 1`
#--------------debug-------------
#subCaConWait=10
#pubCaConWait=10
###############testcase 11 subCaATopic#################
##############订阅单个主题，发布不同消息，每隔一定消息数查询一次收到消息的情况
#是否开放抓包
subCaATopicCapFlag=false
#订阅主题
subCaATopic="subCaATopic"
#订阅的ID
subCaATopicID="subCaATopicID"
#订阅优先级
subCaATopicQos=0
#发布优先级
pubCaATopicQos=0
#接收消息保存文件
subCaATopicRecieved="SubCaATopicRecieved"
#发布消息数计数文件
pubCaATopicFName="PubCaATopicNum"
#发布消息数量,10W
pubCaATopicNum=100000
#发布多少条消息后查询一次,1W
pubCaQueryNum=10000
#查询前等待消息收取的等待时间
pubCaQueryWait=5
#发布消息起始ID序号
pubCaATopicSNum=1
pubCaATopicENum=`expr $pubCaATopicSNum + $pubCaATopicNum - 1`
#发布消息内容前缀
pubCaATopicMsgPre="pubCaATopicMsg"
#发布方主题ID前缀
pubCaATopicIDPre="pubCaATopicID"
#####################mqttClient.sh subPub#####################
#####################mqtt sub pub test########################
subPubTopic=mqtttopic
#订阅消息数
pubSubNum=2
pubSubSNum=1
pubSubENum=`expr $pubSubNum + $pubSubSNum - 1`
#发布消息数
subPubNum=2
subPubSNum=1
subPubENum=`expr $subPubNum + $subPubSNum - 1`
#单台设备发布和订阅数
sub_pub_num=`expr $pubSubNum \* $subPubNum`
#保存收到的订阅消息
subPubRecieved="SubPubRecieved"
#批量订阅后，等待多久后再进行发布的时间间隔,订阅数较多时要修改此值,
#用在mqttClient.sh
subPubGap=30
clientGap=10
#####################mqttClient.sh pubLoop#######################
##########################mqtt_pub###############################
pubTopicPre="mosquittoTopic"
pubMsgPre="mosquittoMSG"
pubIDPre="mosquittoPubId"
sPubNum=1
ePubNum=1
pubQos=0
